// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TaskManagementSystem.Models;

namespace TaskManagementSystem.Migrations
{
    [DbContext(typeof(TaskManagementSystemDbContext))]
    partial class TaskManagementSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManagementSystem.Areas.Admin.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActualEndingDate");

                    b.Property<bool>("Closed");

                    b.Property<DateTime>("EndingDate");

                    b.Property<string>("ProjectName");

                    b.Property<DateTime>("StartingDate");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentAttachment");

                    b.Property<DateTime>("CommentDate");

                    b.Property<string>("CommentEmployeeId");

                    b.Property<int>("CommentTaskId");

                    b.Property<string>("Comments");

                    b.HasKey("Id");

                    b.HasIndex("CommentTaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Employee", b =>
                {
                    b.Property<string>("UserName");

                    b.Property<string>("Password");

                    b.Property<bool>("isAdmin");

                    b.HasKey("UserName");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Task", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime?>("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<bool>("Closed");

                    b.Property<string>("Employee_AssignedBy");

                    b.Property<string>("Employee_AssignedTo");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int?>("Project_Id");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TaskName")
                        .IsRequired();

                    b.Property<string>("dummy");

                    b.HasKey("Id");

                    b.HasIndex("Employee_AssignedBy");

                    b.HasIndex("Employee_AssignedTo");

                    b.HasIndex("Project_Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Comment", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("CommentTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManagementSystem.Models.Task", b =>
                {
                    b.HasOne("TaskManagementSystem.Models.Employee", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("Employee_AssignedBy");

                    b.HasOne("TaskManagementSystem.Models.Employee", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("Employee_AssignedTo");

                    b.HasOne("TaskManagementSystem.Areas.Admin.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("Project_Id");
                });
#pragma warning restore 612, 618
        }
    }
}
